/**
 * *****************************************************************************
 *
 * 条形编码
 *
 * 条形码广泛应用在生产管理、审批流程、物流控制、单据编号等方面;
 *
 * ## 支持的编码格式
 *
 * 目前仅支持支持CODE128A\B\C
 *
 * ## 编码逻辑
 *
 * * 自动检测并选择编码类型
 *
 * ## 特点
 *
 * * 可表示高密度数据和字符串;
 * * 每个字符由3个条、3个空、11个单元构成，字符串可变长,不超过232个字符;
 * * 符号内含校验码;
 * * 有三种不同的版本:
 *   * CODE128A: 标准数字和大写字母,控制符,特殊字符 
 *   * CODE128B: 标准数字和大写字母,小写字母,特殊字符
 *   * CODE128C: [00]-[99]的数字对集合,共100个(只能表示偶数位长度)
 * * 可用128个字符分别在A、B或C三个字符串集合中。
 *
 * ## 构成
 *
 * 1. 空白区域
 * 2. 起始标记 
 * 3. 数据区
 * 4. 校验区
 * 5. 终止符
 * 6. 空白区域
 *
 * ## 编码规则
 * 
 * 开始位 + 数据位 + 校验位 + 结束位
 *
 * ## 校验码位计算
 *
 * (开始位对应ID + 数据位在整个数据中的位置X对应的ID值) % 103
 *
 *
 * [参考项目](https://github.com/lindell/JsBarcode)
 * *****************************************************************************
 */

export const barcode = () => {
}

/**
 * 条形码编码集
 * CODE128 includes 107 symbols:
 * 3 start symbols (A, B and C), 103 data symbols, and 1 stop symbol (the last one)
 * Each symbol consist of three black bars (1) and three white spaces (0).
 */

export const CODE128_BARS = [
	11011001100, 11001101100, 11001100110, 10010011000, 10010001100, 10001001100, 
  10011001000, 10011000100, 10001100100, 11001001000, 11001000100, 11000100100, 
  10110011100, 10011011100, 10011001110, 10111001100, 10011101100, 10011100110, 
  11001110010, 11001011100, 11001001110, 11011100100, 11001110100, 11101101110, 
  11101001100, 11100101100, 11100100110, 11101100100, 11100110100, 11100110010,
	11011011000, 11011000110, 11000110110, 10100011000, 10001011000, 10001000110, 
  10110001000, 10001101000, 10001100010, 11010001000, 11000101000, 11000100010, 
  10110111000, 10110001110, 10001101110, 10111011000, 10111000110, 10001110110, 
  11101110110, 11010001110, 11000101110, 11011101000, 11011100010, 11011101110, 
  11101011000, 11101000110, 11100010110, 11101101000, 11101100010, 11100011010,
	11101111010, 11001000010, 11110001010, 10100110000, 10100001100, 10010110000, 
  10010000110, 10000101100, 10000100110, 10110010000, 10110000100, 10011010000, 
  10011000010, 10000110100, 10000110010, 11000010010, 11001010000, 11110111010, 
  11000010100, 10001111010, 10100111100, 10010111100, 10010011110, 10111100100, 
  10011110100, 10011110010, 11110100100, 11110010100, 11110010010, 11011011110,
	11011110110, 11110110110, 10101111000, 10100011110, 10001011110, 10111101000, 
  10111100010, 11110101000, 11110100010, 10111011110, 10111101110, 11101011110, 
  11110101110, 

  11010000100,   // 103 startA 
  11010010000,   // 104 startB
  11010011100,   // 105 startC
  1100011101011, // 106 stop
];

class Barcode {
  /**
   * constructor
   *
   * @param {string} data
   * @param {object} options
   */
  constructor (data = '', options = {}) {
    this.data = data;
    this.text = options.text || data;

    this.options = Object.assign({}, {
      format: 'auto',
      text: null,
    }, options);

    this.codes = this.data.split('').map(char => char.charCodeAt(0));
    this.detect();
    this.encode();

  }

  /**
   * 条形码编码
   */

  encode () {
    this.data = CODE128_BARS[this.startID] + 
      this.codes.map(code => CODE128_BARS[code-32]).join('') +
      CODE128_BARS[this.checkSum()] + 
      CODE128_BARS[106];

    return this;
  }

  checkSum () {
    return this.codes.reduce(
      (sum, code, index) => sum + (code - 32) * (index + 1), 
      this.startID
    ) % 103;
  }

  detect () {

    // 猜测算法:
    // 首先根据数据长度为偶数位时使用CODE128C编码,否则使用CDOE128A
    let encode = this.codes.length % 2 === 0 ? 'CODE128C' : 'CODE128A';

    for (const code of this.codes) {
      if (encode === 'CODE128B') break; // 检测到CODE128B时介绍检测
      if (encode === 'CODE128C') {
        if (!/[0-9]/.test(String.fromCharCode(code))) encode = 'CODE128A';
      }

      if (encode === 'CODE128A') {
        if (code >= 96 && code <= 126) encode = 'CODE128B';
      }
    }

    switch (encode) {
      case 'CODE128A':
        this.startID = 103;
        break;
      case 'CODE128B':
        this.startID = 104;
        break;
      case 'CODE128C':
        this.startID = 105;
        break;
    }

    return this;
  }
}

